#load libraries
library(dplyr)
library(sf)
library(adegenet) #genind, etc.
library(vegan)    #Delta+
library(poppr)    #bitwise.dist()
library(foreach)
library(doParallel)

# functions
calculate_EDplus <- function(genind_obj) {
  allele_frequencies <- tab(genind_obj, freq = TRUE)
  dist_matrix <- bitwise.dist(genind_obj)
  mod <- taxondive(t(allele_frequencies), dist_matrix)
  return(mod$EDplus)
}


# load data:
# potential KBAs
potential_KBAs <- st_read("data/potential_KBAs/potential_KBAs.shp")

# copy .structure file and change file ending into .stru
# delete the first row
# load genetic data
genetic_info <- read.structure("data/SNPs.stru") 
345
5237
1
2

0
n

# add coordinates
# load data:
individual <- indNames(genetic_info) 
coordinates <- read.csv("data/collection_data.csv")
# organize coordinates:
coordinates$WGS84_X <- as.numeric(gsub(",", ".", coordinates$WGS84_X))
coordinates$WGS84_Y <- as.numeric(gsub(",", ".", coordinates$WGS84_Y))
coordinates_filtered <- coordinates[coordinates$Specimen_ID %in% individual, ] # removes rows without a matching individual
coordinates_ordered <- coordinates_filtered[match(individual, coordinates_filtered$Specimen_ID), ] # same order like in individual
coordinates_clean <- coordinates_ordered[!is.na(coordinates_ordered$WGS84_X) & !is.na(coordinates_ordered$WGS84_Y), ] # avoid mistake because NA
coordinates_sf <- st_as_sf(coordinates_clean, coords = c("WGS84_X", "WGS84_Y"), crs = 4326) 
coordinates_matching_coordinatesystem <- st_transform(coordinates_sf, crs = st_crs(potential_KBAs))
tidy_coordinates <- coordinates_matching_coordinatesystem %>%
  dplyr::select(Specimen_ID, geometry)

# which individuals are in an area?
individual_area <- st_join(tidy_coordinates, potential_KBAs , join = st_within)
#table(individual_area$area_ID)
# add the area information to genind object
population <- individual_area$name
pop(genetic_info) <- as.factor(population)


# create list: one genind for each population
genind_list <- lapply(unique(population), function(pop_name) {
  inds <- which(genetic_info@pop == pop_name)  # Indizes der Individuen der Population
  genetic_info[inds, ] # Subset des genind-Objekts
})
names(genind_list) <- unique(population)


start_time <- Sys.time()

# total alleles- threshold
total_alleles <- sum(nAll(genetic_info))
threshold <- total_alleles * 0.9

# prepare cluster
num_cores <- parallel::detectCores() - 1
cl <- makeCluster(num_cores)
registerDoParallel(cl)

stop_loop <- FALSE
EDplus_df <- data.frame()
for (n_combinations in 1:length(genind_list)) {
  if (stop_loop) break
  combinations <- combn(names(genind_list), n_combinations, simplify = FALSE)
  results <- foreach(area_names = combinations, .combine = rbind,
                     .packages = c("adegenet", "poppr", "vegan")) %dopar% {
                       if (length(area_names) > 1) {
                         genind_areaS <- do.call(repool, genind_list[area_names])
                         name <- paste(area_names, collapse = "_")
                       } else {
                         genind_areaS <- genind_list[[area_names[1]]]
                         name <- area_names[1]
                       }
                       n_alleles <- sum(colSums(genind_areaS@tab) > 0)
                       if (n_alleles >= threshold) {
                         EDplus <- if (nInd(genind_areaS) < 2) NA else calculate_EDplus(genind_areaS)
                         data.frame(areaS = name, EDplus = EDplus, n_alleles = n_alleles)
                       } else {
                         NULL
                       }
                     }
  if (!is.null(results) && nrow(results) > 0) {
    EDplus_df <- rbind(EDplus_df, results)
    stop_loop <- TRUE
  }
}


stopCluster(cl)

# view results
EDplus_df <- EDplus_df[order(EDplus_df$EDplus, decreasing = TRUE), ]
head(EDplus_df, 10)

end_time <- Sys.time()
end_time - start_time
